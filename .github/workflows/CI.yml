name: CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always
  JUST_VERBOSE: 1
  #RUSTFLAGS: "--deny warnings" # Fail on all warnings

defaults:
  run:
    shell: bash

jobs:

  Test:
    strategy:
      matrix:
        target:
          - aarch64-apple-darwin
          - aarch64-unknown-linux-musl
          - arm-unknown-linux-musleabihf
          - armv7-unknown-linux-musleabihf
          - x86_64-apple-darwin
          - x86_64-pc-windows-msvc
          - aarch64-pc-windows-msvc
          - x86_64-unknown-linux-musl
        include:
          - target: aarch64-apple-darwin
            os: macos-latest
            target_rustflags: ''
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            target_rustflags: '--codegen linker=aarch64-linux-gnu-gcc'
          - target: arm-unknown-linux-musleabihf
            os: ubuntu-latest
            target_rustflags: '--codegen linker=arm-linux-gnueabihf-gcc'
          - target: armv7-unknown-linux-musleabihf
            os: ubuntu-latest
            target_rustflags: '--codegen linker=arm-linux-gnueabihf-gcc'
          - target: x86_64-apple-darwin
            os: macos-latest
            target_rustflags: ''
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            target_rustflags: ''
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            target_rustflags: ''
      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
    - uses: Swatinem/rust-cache@v2
    - uses: extractions/setup-just@v2

    - name: Add Rust target
      run: rustup target add ${{ matrix.target }}
    - name: Install musl-gcc
      if: ${{ matrix.target == 'x86_64-unknown-linux-musl' }}
      run: sudo apt-get update && sudo apt-get install musl-tools && musl-gcc --version

    - name: Install AArch64 Toolchain
      if: ${{ matrix.target == 'aarch64-unknown-linux-musl' }}
      run: |
        sudo apt-get update && sudo apt-get install gcc-aarch64-linux-gnu libc6-dev-i386
        echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

    - name: Install ARM Toolchain
      if: ${{ matrix.target == 'arm-unknown-linux-musleabihf' || matrix.target == 'armv7-unknown-linux-musleabihf' }}
      run: |
        sudo apt-get update && sudo apt-get install gcc-arm-linux-gnueabihf
        echo "CC=arm-linux-gnueabihf-gcc" >> $GITHUB_ENV

    - name: Install AArch64 Toolchain (Windows)
      if: ${{ matrix.target == 'aarch64-pc-windows-msvc' }}
      run: rustup target add aarch64-pc-windows-msvc

    - name: Build
      continue-on-error: true
      run: RUSTFLAGS="--codegen target-feature=+crt-static ${{ matrix.target_rustflags }}" cargo build --bin plot5h --target ${{ matrix.target }} --release
    
    - name: Try Build again if failed
      run: RUSTFLAGS="--codegen target-feature=+crt-static ${{ matrix.target_rustflags }}" cargo build --bin plot5h --target ${{ matrix.target }} --release


    - name: Upload bin Unix
      if: ${{ !contains(matrix.os, 'windows') }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.target }}
        path: target/${{ matrix.target }}/release/plot5h
        retention-days: 30
        if-no-files-found: error

    - name: Upload bin Windows
      if: ${{ !contains(matrix.os, 'windows') }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.target }}
        path: target/${{ matrix.target }}/release/plot5h.exe
        retention-days: 30
        if-no-files-found: error
        